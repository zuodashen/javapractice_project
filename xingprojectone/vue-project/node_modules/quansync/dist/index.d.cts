interface QuansyncInputObject<Return, Args extends any[]> {
    name?: string;
    sync: (...args: Args) => Return;
    async: (...args: Args) => Promise<Return>;
}
type QuansyncGeneratorFn<Return, Args extends any[]> = ((...args: Args) => QuansyncGenerator<Return>);
type QuansyncInput<Return, Args extends any[]> = QuansyncInputObject<Return, Args> | QuansyncGeneratorFn<Return, Args>;
type QuansyncGenerator<Return = any, Yield = unknown> = Generator<Yield, Return, Awaited<Yield>> & {
    __quansync?: true;
};
/**
 * "Superposition" function that can be consumed in both sync and async contexts.
 */
type QuansyncFn<Return = any, Args extends any[] = []> = ((...args: Args) => QuansyncGenerator<Return> & Promise<Return>) & {
    sync: (...args: Args) => Return;
    async: (...args: Args) => Promise<Return>;
};
/**
 * Creates a new Quansync function, a "superposition" between async and sync.
 */
declare function quansync<Return, Args extends any[] = []>(options: QuansyncInput<Return, Args> | Promise<Return>): QuansyncFn<Return, Args>;
/**
 * Converts a promise to a Quansync generator.
 */
declare function toGenerator<T>(promise: Promise<T> | QuansyncGenerator<T> | T): QuansyncGenerator<T>;

export { type QuansyncFn, type QuansyncGenerator, type QuansyncGeneratorFn, type QuansyncInput, type QuansyncInputObject, quansync, toGenerator };
